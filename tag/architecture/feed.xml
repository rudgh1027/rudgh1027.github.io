<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="/tag/architecture/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2019-12-10T19:01:29+09:00</updated>
  <id>/tag/architecture/feed.xml</id>

  
  
  

  
    <title type="html">GKArchy | </title>
  

  
    <subtitle>IT Service Technology Blog</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Queue Based Load Leveling</title>
      <link href="/queueBasedLoadLeveling" rel="alternate" type="text/html" title="Queue Based Load Leveling" />
      <published>2019-10-16T19:18:00+09:00</published>
      <updated>2019-10-16T19:18:00+09:00</updated>
      <id>/queueBasedLoadLeveling</id>
      <content type="html" xml:base="/queueBasedLoadLeveling">&lt;h2 id=&quot;describe-this-pattern-1&quot;&gt;Describe this pattern &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;h3 id=&quot;1-feature&quot;&gt;1. Feature&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Queue evenly transfer messages with certain speed. So that it can prevent service disorder caused by high traffic.&lt;/li&gt;
  &lt;li&gt;We can also check change of scales depending on request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-advantages&quot;&gt;2. Advantages&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In case of service disorder, clients could send request due to queue as buffer.&lt;/li&gt;
  &lt;li&gt;scaling up and down number of queues and services. As a result, we could maximize availability.&lt;/li&gt;
  &lt;li&gt;optimizing cost.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-requirement&quot;&gt;3. Requirement&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Need to control message processing speed&lt;/li&gt;
  &lt;li&gt;Asynchronous messaging mechanism is needed&lt;/li&gt;
  &lt;li&gt;It can be degraded because of competition caused by auto scaling.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-case&quot;&gt;Use case&lt;/h2&gt;

&lt;h3 id=&quot;1-faced-problem-case-1&quot;&gt;1. Faced Problem (Case 1)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.microsoft.com/ko-kr/azure/architecture/patterns/_images/queue-based-load-leveling-overwhelmed.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Service can fail, if requests from web app to datastore are increased.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-solution-case-2&quot;&gt;2. Solution (Case 2)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.microsoft.com/ko-kr/azure/architecture/patterns/_images/queue-based-load-leveling-function.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It could control writing speed to datastore using Service bus queue and Function app.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;
&lt;h3 id=&quot;1-plan&quot;&gt;1. Plan&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Suppose to Health care system that collects body heat and heartbeat in seconds.&lt;/li&gt;
  &lt;li&gt;Use Azure table storage as datastore (Because it has limit of processing transaction so that it will occur disorder)&lt;/li&gt;
  &lt;li&gt;Case 1 : Console application -&amp;gt; Table storage (Several requests are expected to fail, If 100-thousands of job have been requested)&lt;/li&gt;
  &lt;li&gt;Case 2 : Console application -&amp;gt; Service bus queue -&amp;gt; Function app -&amp;gt; Table storage&lt;/li&gt;
  &lt;li&gt;All requests will complete due to queue as buffer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-practice&quot;&gt;2. Practice&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;It already wrote in github repository. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Before inserting data from &lt;strong&gt;service bus queue&lt;/strong&gt; to &lt;strong&gt;Table storage&lt;/strong&gt; using &lt;strong&gt;Azure function app&lt;/strong&gt;, I inserted 6000+ data to &lt;strong&gt;service bus queue&lt;/strong&gt; in advance. (It takes 30 minutes)
&lt;img src=&quot;/assets/images/loadLeveling_queueCount.png&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;And then, running &lt;strong&gt;Azure function app&lt;/strong&gt; to put data into &lt;strong&gt;Table storage&lt;/strong&gt; (It takes only a few seconds)
&lt;img src=&quot;/assets/images/loadLeveling_tableMetric.png&quot; /&gt;
    &lt;h2 id=&quot;lessen--learn&quot;&gt;Lessen &amp;amp; Learn&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;Testing on Case 1 : Pass
    &lt;ul&gt;
      &lt;li&gt;Impossible to make enough transaction : Console application can send only one or two messages to queue, but table storage can write 20-thousands of data per 1 second.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;personal perspective
    &lt;ul&gt;
      &lt;li&gt;To predict amount of usage during POC period, this pattern is proper to using(Cost-effective, stable availability)&lt;/li&gt;
      &lt;li&gt;Selecting SaaS product, Based on predictation of usage. (Example of NoSQL type)
        &lt;ul&gt;
          &lt;li&gt;Below 20,000 TPS : Azure table storage (Can be complemented by MQ)&lt;/li&gt;
          &lt;li&gt;Below 10,000,000 TPS : Azure CosmosDB (Can be complemented by MQ)&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
          &lt;li&gt;Over 10,000,000 TPS : Azure CosmosDB + Azure cache for Redis &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Recommend Cosmos DB rather than Azure table storage(High TPS, Recovery option … etc)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Additional Example 1 &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn5&quot; id=&quot;fnref5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.microsoft.com/ko-kr/azure/architecture/reference-architectures/app-service-web-app/images/scalable-web-app.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Requet backgroud process using queue and function, so that it preserves scalablity and availability.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Additional Example 2 &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn6&quot; id=&quot;fnref5&quot;&gt;[6]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://docs.microsoft.com/ko-kr/azure/architecture/example-scenario/ai/media/mass-ingestion-newsfeeds-architecture.png&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;passing through several APIs sequentially&lt;/li&gt;
      &lt;li&gt;If certain API faces disorder or bottleneck, Queues take a role as buffer for load leveling.&lt;/li&gt;
      &lt;li&gt;If you complement this system using circuit-breaker and retry pattern, availability and efficiency will be maximized.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;footnotes-sep&quot; /&gt;

&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;
            reference: &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/patterns/queue-based-load-leveling&quot;&gt;
                &lt;small&gt;https://docs.microsoft.com/en-us/azure/architecture/patterns/queue-based-load-leveling&lt;/small&gt;
            &lt;/a&gt; 
            &lt;a href=&quot;#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;
            reference: &lt;a href=&quot;https://github.com/rudgh1027/cloud/blob/master/azure/002.queueTriggeredFunction_tableInsert/README.md&quot;&gt;
                &lt;small&gt;https://github.com/rudgh1027/cloud/blob/master/azure/002.queueTriggeredFunction_tableInsert/README.md&lt;/small&gt;
            &lt;/a&gt; 
            &lt;a href=&quot;#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;
            reference: &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/cosmos-db/table-support&quot;&gt;
                &lt;small&gt;https://docs.microsoft.com/en-us/azure/cosmos-db/table-support&lt;/small&gt;
            &lt;/a&gt; 
            &lt;a href=&quot;#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;
            reference: &lt;a href=&quot;https://azure.microsoft.com/en-us/services/cache/&quot;&gt;
                &lt;small&gt;https://azure.microsoft.com/en-us/services/cache/&lt;/small&gt;
            &lt;/a&gt; 
            &lt;a href=&quot;#fnref4&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn5&quot; class=&quot;footnote-item&quot;&gt;
            reference: &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/app-service-web-app/scalable-web-app&quot;&gt;
                &lt;small&gt;https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/app-service-web-app/scalable-web-app&lt;/small&gt;
            &lt;/a&gt; 
            &lt;a href=&quot;#fnref5&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn6&quot; class=&quot;footnote-item&quot;&gt;
            reference: &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/example-scenario/ai/newsfeed-ingestion&quot;&gt;
                &lt;small&gt;https://docs.microsoft.com/en-us/azure/architecture/example-scenario/ai/newsfeed-ingestion&lt;/small&gt;
            &lt;/a&gt; 
            &lt;a href=&quot;#fnref6&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;
    &lt;/li&gt;
&lt;/ol&gt;


&lt;/section&gt;</content>

      
      
      
      
      

      <author>
          <name>gkarchy</name>
        
        
      </author>

      

      
        <category term="architecture" />
      
        <category term="azure" />
      

      
        <summary type="html">Describe this pattern [1]</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Asynchronous Messaging Pattern</title>
      <link href="/welcome-to-asynchronous-messaging" rel="alternate" type="text/html" title="Asynchronous Messaging Pattern" />
      <published>2019-10-02T19:00:00+09:00</published>
      <updated>2019-10-02T19:00:00+09:00</updated>
      <id>/welcome-to-asynchronous-messaging</id>
      <content type="html" xml:base="/welcome-to-asynchronous-messaging">&lt;h3&gt;Intro&lt;/h3&gt;
&lt;p&gt;Message queue provides &quot;Asynchronous communication protocol&quot;. That means it is not necessary for sender and receiver to be connected at the same time. It can make application scalable and flexible.&lt;/p&gt;

&lt;h3&gt;Feature and benefits&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;There are no direct connections between programs.&lt;/li&gt;
    &lt;li&gt;Communication between programs can be independent of time.&lt;/li&gt;
    &lt;li&gt;Work can be carried out by small, self-contained programs.&lt;/li&gt;
    &lt;li&gt;Communication can be driven by events.&lt;/li&gt;
    &lt;li&gt;Applications can assign a priority to a message.&lt;/li&gt;
    &lt;li&gt;Security.&lt;/li&gt;
    &lt;li&gt;Data integrity.&lt;/li&gt;
    &lt;li&gt;Recovery support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Basic Message Queuing Patterns&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;ol&gt;
    &lt;li&gt;One-way messaging&lt;/li&gt;
    &lt;ul&gt;
        &lt;li&gt;General pattern of messaging queue. Sender just posts a meesage and receiver just retrieve it to process some logic.&lt;/li&gt;
        &lt;li&gt;Reference Architecture&lt;sub&gt;(azure)&lt;/sub&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
        &lt;img src=&quot;/assets/images/scalable-web-app.png&quot; alt=&quot;Test Image&quot; style=&quot;width: 100% !important;&quot; /&gt;
        &lt;p&gt;- improving scalability and performance in an Azure App Service web application&lt;br /&gt;- Go to the link [3]. We can use deployment script generating azure resource and application code on github reposipory.&lt;/p&gt;
        &lt;li&gt;&lt;a href=&quot;https://rudgh1027.github.io/queue-Triggered-Function_tableInsert&quot;&gt;&lt;mark&gt;Self practice&lt;/mark&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;Request/response messaging&lt;/li&gt;
    &lt;ul&gt;
        &lt;li&gt;Sender posts a message to a queue and wait for a response from the receiver&lt;/li&gt;
        &lt;li&gt;Confirming whether messages have been proccessed(reliablity)&lt;/li&gt;
        &lt;li&gt;Need to separate communication channel as queue&lt;/li&gt;
        &lt;img src=&quot;/assets/images/request-response-messaging.png&quot; alt=&quot;Test Image&quot; style=&quot;width: 100% !important;&quot; /&gt;
        &lt;li&gt;&lt;!--&lt;a href=&quot;&quot;&gt;--&gt;&lt;mark&gt;Self practice&lt;/mark&gt;&lt;!--&lt;/a&gt;--&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;Broadcast messaging&lt;/li&gt;
    &lt;ul&gt;
        &lt;li&gt; sender posts a message to a queue, and multiple receivers can read a copy&lt;/li&gt;
        &lt;li&gt;It is used to implement a publisher/subscriber model&lt;/li&gt;
        &lt;li&gt;Reference Architecture&lt;sub&gt;(azure)&lt;/sub&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
        &lt;img src=&quot;/assets/images/enterprise-integration-queues-events.png&quot; alt=&quot;Test Image&quot; style=&quot;width: 100% !important;&quot; /&gt;
        &lt;p&gt;- Asynchronous communication using a message broker&lt;br /&gt;- An application or service can publish events, and any interested subscribers will be notified.&lt;/p&gt;
        &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;mark&gt;Self practice&lt;/mark&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/ol&gt;

&lt;hr class=&quot;footnotes-sep&quot; /&gt;

&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;
            reference: &lt;a href=&quot;https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_7.5.0/com.ibm.mq.pro.doc/q002630_.htm&quot;&gt;
                &lt;small&gt;https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_7.5.0/com.ibm.mq.pro.doc/q002630_.htm&lt;/small&gt;
            &lt;/a&gt; 
            &lt;a href=&quot;#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;
            reference: &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/msp-n-p/dn589781(v=pandp.10)?redirectedfrom=MSDN&quot;&gt;
                &lt;small&gt;https://docs.microsoft.com/en-us/previous-versions/msp-n-p/dn589781(v=pandp.10)?redirectedfrom=MSDN&lt;/small&gt;
            &lt;/a&gt; 
            &lt;a href=&quot;#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;
            reference: &lt;a href=&quot;https://docs.microsoft.com/ko-kr/azure/architecture/reference-architectures/app-service-web-app/scalable-web-app&quot;&gt;
                &lt;small&gt;https://docs.microsoft.com/ko-kr/azure/architecture/reference-architectures/app-service-web-app/scalable-web-app&lt;/small&gt;
            &lt;/a&gt; 
            &lt;a href=&quot;#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;
            reference: &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/enterprise-integration/queues-events&quot;&gt;
                &lt;small&gt;https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/enterprise-integration/queues-events&lt;/small&gt;
            &lt;/a&gt; 
            &lt;a href=&quot;#fnref4&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;
    &lt;/li&gt;
&lt;/ol&gt;

&lt;/section&gt;</content>

      
      
      
      
      

      <author>
          <name>gkarchy</name>
        
        
      </author>

      

      
        <category term="architecture" />
      

      
        <summary type="html">Intro Message queue provides &quot;Asynchronous communication protocol&quot;. That means it is not necessary for sender and receiver to be connected at the same time. It can make application scalable and flexible.</summary>
      

      
      
    </entry>
  
</feed>
